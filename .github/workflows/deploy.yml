name: Deploy to SSH Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_PROTOCOL: ${{ secrets.NEXT_PUBLIC_PROTOCOL }}
        NEXT_PUBLIC_HOSTNAME: ${{ secrets.NEXT_PUBLIC_HOSTNAME }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          package-lock.json
          next.config.mjs
        retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Create deployment directory with timestamp
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        DEPLOY_DIR="/var/www/inter-com-isp_$TIMESTAMP"
        
        # Create remote directory
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "sudo mkdir -p $DEPLOY_DIR"
        
        # Copy files to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.env*' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_DIR/
        
        # Install dependencies and setup on server
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd $DEPLOY_DIR
          
          # Install Node.js dependencies
          npm ci --only=production
          
          # Set proper permissions
          sudo chown -R www-data:www-data $DEPLOY_DIR
          sudo chmod -R 755 $DEPLOY_DIR
          
          # Create environment file from secrets
          sudo tee $DEPLOY_DIR/.env.local > /dev/null << 'ENVEOF'
          NEXT_PUBLIC_PROTOCOL=${{ secrets.NEXT_PUBLIC_PROTOCOL }}
          NEXT_PUBLIC_HOSTNAME=${{ secrets.NEXT_PUBLIC_HOSTNAME }}
        ENVEOF
          
          # Stop existing PM2 process if running
          pm2 stop inter-com-isp || true
          pm2 delete inter-com-isp || true
          
          # Start new PM2 process
          cd $DEPLOY_DIR
          pm2 start npm --name "inter-com-isp" -- start
          pm2 save
          
          # Update symlink to current deployment
          sudo rm -f /var/www/inter-com-isp-current
          sudo ln -sf $DEPLOY_DIR /var/www/inter-com-isp-current
          
          # Clean up old deployments (keep last 3)
          cd /var/www
          sudo ls -t | grep "inter-com-isp_" | tail -n +4 | sudo xargs rm -rf
        EOF

    - name: Health check
      run: |
        # Wait for application to start
        sleep 30
        
        # Check if application is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SSH_HOST }}:3000 || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Deployment successful! Application is running."
        else
          echo "❌ Deployment may have issues. HTTP status: $response"
          exit 1
        fi

  notify:
    needs: [build-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "🚀 Deployment completed successfully!"
        else
          echo "💥 Deployment failed!"
        fi 